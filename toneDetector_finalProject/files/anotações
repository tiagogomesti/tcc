






messageHandle_tb: entity work.messageHandler_tb(messageHandler_tb)
port map
(
  CLOCK               => GLOBAL_CLOCK,
  RESET               => GLOBAL_RESET,

  MSG_RX              => TONE_DET_MSG_TX_S,
  MSG_RX_DATA         => TONE_DET_MSG_TX_DATA_S,
  MSG_RX_ACK          => TONE_DET_MSG_TX_ACK_S
);



















variable fstatus: FILE_OPEN_STATUS;
file_open(fstatus, data_out, “myfile.txt”, write_mode);






entity readFile is
generic 
( channel_index             : integer range 0 to NUM_CH-1 );

port
(
  RST                       : in std_logic;
  CLK                       : in std_logic;  -- 8 KHz

  start_read                : in std_logic;
  stop_read                 : in std_logic;

  numFile                   : in natural;

  FRAME                     : out PCM_TYPE
);
end readFile;

architecture readFileValidation of readFile is
  type STATE is (S0,
                 WAIT_START_READ,
                 READING_FILE,
                 END_OF_FILE,
                 STOP_READ
                );



  constant timeSlot_string : string := ".\\in_files\\file_";
  constant wav_extension  : string := ".hex.wav";

  -- constant pathString: string := timeSlot_string & integer'image(numFile) & wav_extension;

--=======================================================================--

  -- type wordFileType is file of character;
  --  file timeSlot : wordFileType open read_mode is pathString;  

  signal readHeaderEnd: std_logic := '0';















  type wordFileType is file of character;
    file fileParams_f : wordFileType open read_mode is ".\\in_files\\fileParams.txt"; 

  signal num_files_s                    : natural;

type CMD_INSERT_STATE is (S0_CMD,
                            WAIT_FLAG,
                            SEND_CMD,
                            AUDIO_CONNECTION
                            );
  signal CURRENT_STATE_CMD, NEXT_STATE_CMD : CMD_INSERT_STATE;

  type RECEIVE_MSG_VALIDATE is (S0_MSG


    );


  signal ports_free_s                   : std_logic_vector (0 to NUM_CH-1);

  signal cmd_trigger_s                  : std_logic;
  signal wait_cmd_s                     : std_logic;

  signal timeslot_s                     : natural range 0 to NUM_CH-1;
  signal max_min_pulse_s                : unsigned (WORD_SIZE-1 downto 0);
  signal max_min_pause_s                : unsigned (WORD_SIZE-1 downto 0);
  signal attenuation_cadence_s          : unsigned (WORD_SIZE-1 downto 0);
  signal threshold_s                    : unsigned (WORD_SIZE-1 downto 0);
  signal coeff1_s                       : unsigned (WORD_SIZE-1 downto 0);
  signal coeff2_s                       : unsigned (WORD_SIZE-1 downto 0);




















toneDetector: entity work.toneDetector(toneDetector)
port map
(
  RESET           => GLOBAL_RESET,
  CLK             => GLOBAL_CLOCK,

  CLK_8KHz         => CLK_8KHz,

  CMD_RX_DATA     => TONE_DET_CMD_RX_DATA_S,
  CMD_WORD_INDEX  => CMD_WORD_INDEX_S,
  WRITE_CMD_BUFFER=> WRITE_CMD_BUFFER_S,
  CMD_RX          => TONE_DET_CMD_RX_S,
  CMD_RX_ACK      => TONE_DET_CMD_RX_ACK_S,

  MSG_TX          => TONE_DET_MSG_TX_S,
  MSG_TX_DATA     => TONE_DET_MSG_TX_DATA_S,
  MSG_TX_ACK      => TONE_DET_MSG_TX_ACK_S,

  TDM_FRAME       => TONE_DET_TDM_FRAME_S,
  CHANNEL_ID      => TONE_DET_CHANNEL_ID_S
);


command_tb: entity work.command_tb(Behavioral)
port map
(
  RESET               => GLOBAL_RESET,
  CLK                 => GLOBAL_CLOCK,

  CMD_TX_DATA         => TONE_DET_CMD_RX_DATA_S,
  CMD_WORD_INDEX      => CMD_WORD_INDEX_S,
  WRITE_CMD_BUFFER    => WRITE_CMD_BUFFER_S,  
  CMD_TX              => TONE_DET_CMD_RX_S,
  CMD_TX_ACK          => TONE_DET_CMD_RX_ACK_S
);

messageHandle_tb: entity work.messageHandler_tb(messageHandler_tb)
port map
(
  CLOCK               => GLOBAL_CLOCK,
  RESET               => GLOBAL_RESET,

  MSG_RX              => TONE_DET_MSG_TX_S,
  MSG_RX_DATA         => TONE_DET_MSG_TX_DATA_S,
  MSG_RX_ACK          => TONE_DET_MSG_TX_ACK_S
);




tdmSwitch_tb: entity work.tdmSwitch_tb(tdmSwitch_tb)
port map
(
  RST                 => GLOBAL_RESET,
  -- CLK                 => GLOBAL_CLOCK,

  CLK_8KHz            => CLK_8KHz,
  clk_tdm             => clk_tdm,

  OUT_FRAME           => TONE_DET_TDM_FRAME_S,
  CHANNEL_ID          => TONE_DET_CHANNEL_ID_S

  -- OUT_FRAME_ALL       => 
  );



























state_v

cnt_pulse_v
min_pulse_v
max_pulse_v


cnt_pause_v
min_pause_v
max_pause_v


cnt_cadence_v
cadence_v



















A_ACC_v					
B_ACC_v					

attenuation_v				 	
threshold_v					 	


coeff1_v							
sample_1_coeff_1_v		
sample_2_coeff_1_v		

coeff2_v							
sample_1_coeff_2_v		
sample_2_coeff_2_v		

rx_frame_v



 SHIFT_LEFT (ARG: SIGNED; COUNT: NATURAL) return SIGNED;

 shift_right
 shift_left




attenuation_v      =>  inteiro
threshold_v				 => sinalizado
















(
	RST									: in std_logic;
	CLOCK								: in std_logic;

	MSG_BUF_FULL				: out std_logic;
	MSG_FLAG						: out std_logic;

	MSG_RX_DATA					: in unsigned (WORD_SIZE-1 downto 0);
	MSG_RX							: in std_logic;
	MSG_RX_ACK					: out std_logic;

	MSG_TX_DATA					: out unsigned (WORD_SIZE-1 downto 0);
	MSG_TX							: out std_logic;
	MSG_TX_ACK					: in std_logic
);
end messageHandler;

architecture messageHandler of messageHandler is
	signal msg_buf_s							: MSG_BUFFER_TYPE;
	
	type RX_STATE is( 
		S0,
		WAIT_RX,
		INC_TAIL,
		WAIT_MSG_BUF_FREE_SPACE
		);
	signal RX_NEXT_STATE, RX_CURRENT_STATE : RX_STATE;

	signal buf_tail_s				: natural range 0 to MSG_BUF_SIZE-1;


	type TX_STATE is( 
		S0,
		SEND_TX,
		SEND_MSG,
		INC_HEAD
		);
	signal TX_NEXT_STATE, TX_CURRENT_STATE	: TX_STATE;

	signal buf_head_s				: natural range 0 to MSG_BUF_SIZE-1;




